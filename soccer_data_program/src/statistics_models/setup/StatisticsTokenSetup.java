package statistics_models.setup;

import java.io.*;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;

public class StatisticsTokenSetup {

  private String tokenName;
  private int tokenCount = 0;
  private BufferedReader in;
  private PrintWriter table, symbols;

  public static void main (String args[]) {
    new StatisticsTokenSetup().initTokenClasses();
  }

  StatisticsTokenSetup(){
    try {
      String sep = System.getProperty( "file.separator" );
      in = new BufferedReader( new FileReader(  "soccer_data_program" + sep + "src" + sep + "statistics_models" + sep + "offense" + sep + "offensiveStatistics" ));
      symbols = new PrintWriter( new FileOutputStream( "soccer_data_program" + sep + "src" + sep + "statistics_models" + sep + "offense" + sep + "offensiveStatisticsTokens.java" ));
    } catch(Exception e){
      System.out.println("Received error in StatisticsTokenSetup constructor");
      System.exit( 0 );
    }
  }

  public void getNextToken() throws IOException {
    try {
      StringTokenizer st = new StringTokenizer( in.readLine() );
      tokenName = st.nextToken();
    } catch( NoSuchElementException e ) {
      System.out.println( "***tokens file does not have 2 strings per line***" );
      System.exit( 1 );
    } catch( NullPointerException ne ) {
      throw new IOException( "***End of File***" );
    }
    tokenCount++;
  }

  public void initTokenClasses(){
    symbols.println ("package statistics_models.offense;" );
    symbols.println (" " );
    symbols.println ("/**" );
    symbols.println (" *  This file is automatically generated<br>" );
    symbols.println (" *  - it contains the enumeration  of all of the statistic tokens" );
    symbols.println ("*/" );
    symbols.println ("public enum offensiveStatisticsTokens {" );
    symbols.print( "  BogusToken" );

    while(true){
      try {
        getNextToken();
      } catch ( IOException e ) { break; }

      if( tokenCount % 5 == 0 ) {
        symbols.print( ",\n    "+ tokenName );
      } else {
        symbols.print( "," + tokenName );
      }
    }
    symbols.println( "\n}" );
    symbols.close();
  }
}
